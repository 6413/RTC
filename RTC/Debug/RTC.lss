
RTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000a0a  00000a9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  0080012e  0080012e  00000acc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000afc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001290  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007db  00000000  00000000  00001eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fd  00000000  00000000  00002687  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  00002d84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000692  00000000  00000000  000030a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a00  00000000  00000000  0000373a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000413a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e2       	ldi	r26, 0x2E	; 46
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 35       	cpi	r26, 0x57	; 87
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b7 04 	call	0x96e	; 0x96e <main>
  9e:	0c 94 03 05 	jmp	0xa06	; 0xa06 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <BINARY2BCD>:
	uint8_t days;
	uint8_t years;
};

uint8_t BINARY2BCD(uint8_t P_BINARY) {
	return ((P_BINARY / 10) << 4) | (P_BINARY % 10);
  a6:	9d ec       	ldi	r25, 0xCD	; 205
  a8:	89 9f       	mul	r24, r25
  aa:	91 2d       	mov	r25, r1
  ac:	11 24       	eor	r1, r1
  ae:	96 95       	lsr	r25
  b0:	96 95       	lsr	r25
  b2:	96 95       	lsr	r25
  b4:	20 e1       	ldi	r18, 0x10	; 16
  b6:	92 9f       	mul	r25, r18
  b8:	a0 01       	movw	r20, r0
  ba:	11 24       	eor	r1, r1
  bc:	99 0f       	add	r25, r25
  be:	29 2f       	mov	r18, r25
  c0:	22 0f       	add	r18, r18
  c2:	22 0f       	add	r18, r18
  c4:	92 0f       	add	r25, r18
  c6:	89 1b       	sub	r24, r25
}
  c8:	84 2b       	or	r24, r20
  ca:	08 95       	ret

000000cc <BCD2BINARY>:
uint8_t BCD2BINARY(uint8_t P_BCD) {
	return (P_BCD & 0x0f) + (((P_BCD >> 4) & 7) * 10);
  cc:	98 2f       	mov	r25, r24
  ce:	96 95       	lsr	r25
  d0:	96 95       	lsr	r25
  d2:	96 95       	lsr	r25
  d4:	9e 70       	andi	r25, 0x0E	; 14
  d6:	29 2f       	mov	r18, r25
  d8:	22 0f       	add	r18, r18
  da:	22 0f       	add	r18, r18
  dc:	92 0f       	add	r25, r18
  de:	8f 70       	andi	r24, 0x0F	; 15
}
  e0:	89 0f       	add	r24, r25
  e2:	08 95       	ret

000000e4 <RTC2BINARY>:

struct ST_RTCTIME RTC2BINARY(struct ST_RTCTIME LRTCTIME) {
  e4:	ef 92       	push	r14
  e6:	ff 92       	push	r15
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	2c 97       	sbiw	r28, 0x0c	; 12
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	4f 83       	std	Y+7, r20	; 0x07
 102:	58 87       	std	Y+8, r21	; 0x08
 104:	69 87       	std	Y+9, r22	; 0x09
 106:	7a 87       	std	Y+10, r23	; 0x0a
 108:	8b 87       	std	Y+11, r24	; 0x0b
 10a:	9c 87       	std	Y+12, r25	; 0x0c
 10c:	8e 01       	movw	r16, r28
 10e:	09 5f       	subi	r16, 0xF9	; 249
 110:	1f 4f       	sbci	r17, 0xFF	; 255
 112:	7e 01       	movw	r14, r28
 114:	8d e0       	ldi	r24, 0x0D	; 13
 116:	e8 0e       	add	r14, r24
 118:	f1 1c       	adc	r15, r1
	for (int i = 0; i < 6; i++)
	((uint8_t*)(&LRTCTIME))[i] = BCD2BINARY(((uint8_t*)(&LRTCTIME))[i]);
 11a:	f8 01       	movw	r30, r16
 11c:	80 81       	ld	r24, Z
 11e:	0e 94 66 00 	call	0xcc	; 0xcc <BCD2BINARY>
 122:	f8 01       	movw	r30, r16
 124:	81 93       	st	Z+, r24
 126:	8f 01       	movw	r16, r30
uint8_t BCD2BINARY(uint8_t P_BCD) {
	return (P_BCD & 0x0f) + (((P_BCD >> 4) & 7) * 10);
}

struct ST_RTCTIME RTC2BINARY(struct ST_RTCTIME LRTCTIME) {
	for (int i = 0; i < 6; i++)
 128:	ee 15       	cp	r30, r14
 12a:	ff 05       	cpc	r31, r15
 12c:	b1 f7       	brne	.-20     	; 0x11a <RTC2BINARY+0x36>
	((uint8_t*)(&LRTCTIME))[i] = BCD2BINARY(((uint8_t*)(&LRTCTIME))[i]);
	return LRTCTIME;
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	fe 01       	movw	r30, r28
 132:	37 96       	adiw	r30, 0x07	; 7
 134:	de 01       	movw	r26, r28
 136:	11 96       	adiw	r26, 0x01	; 1
 138:	01 90       	ld	r0, Z+
 13a:	0d 92       	st	X+, r0
 13c:	8a 95       	dec	r24
 13e:	e1 f7       	brne	.-8      	; 0x138 <RTC2BINARY+0x54>
 140:	29 81       	ldd	r18, Y+1	; 0x01
 142:	3a 81       	ldd	r19, Y+2	; 0x02
 144:	4b 81       	ldd	r20, Y+3	; 0x03
 146:	5c 81       	ldd	r21, Y+4	; 0x04
 148:	6d 81       	ldd	r22, Y+5	; 0x05
 14a:	7e 81       	ldd	r23, Y+6	; 0x06
}
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	2c 96       	adiw	r28, 0x0c	; 12
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	f8 94       	cli
 156:	de bf       	out	0x3e, r29	; 62
 158:	0f be       	out	0x3f, r0	; 63
 15a:	cd bf       	out	0x3d, r28	; 61
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	1f 91       	pop	r17
 162:	0f 91       	pop	r16
 164:	ff 90       	pop	r15
 166:	ef 90       	pop	r14
 168:	08 95       	ret

0000016a <BINARY2RTC>:

struct ST_RTCTIME BINARY2RTC(struct ST_RTCTIME LRTCTIME) {
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	2c 97       	sbiw	r28, 0x0c	; 12
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	de bf       	out	0x3e, r29	; 62
 182:	0f be       	out	0x3f, r0	; 63
 184:	cd bf       	out	0x3d, r28	; 61
 186:	4f 83       	std	Y+7, r20	; 0x07
 188:	58 87       	std	Y+8, r21	; 0x08
 18a:	69 87       	std	Y+9, r22	; 0x09
 18c:	7a 87       	std	Y+10, r23	; 0x0a
 18e:	8b 87       	std	Y+11, r24	; 0x0b
 190:	9c 87       	std	Y+12, r25	; 0x0c
 192:	8e 01       	movw	r16, r28
 194:	09 5f       	subi	r16, 0xF9	; 249
 196:	1f 4f       	sbci	r17, 0xFF	; 255
 198:	7e 01       	movw	r14, r28
 19a:	8d e0       	ldi	r24, 0x0D	; 13
 19c:	e8 0e       	add	r14, r24
 19e:	f1 1c       	adc	r15, r1
	for (int i = 0; i < 6; i++)
	((uint8_t*)(&LRTCTIME))[i] = BINARY2BCD(((uint8_t*)(&LRTCTIME))[i]);
 1a0:	f8 01       	movw	r30, r16
 1a2:	80 81       	ld	r24, Z
 1a4:	0e 94 53 00 	call	0xa6	; 0xa6 <BINARY2BCD>
 1a8:	f8 01       	movw	r30, r16
 1aa:	81 93       	st	Z+, r24
 1ac:	8f 01       	movw	r16, r30
	((uint8_t*)(&LRTCTIME))[i] = BCD2BINARY(((uint8_t*)(&LRTCTIME))[i]);
	return LRTCTIME;
}

struct ST_RTCTIME BINARY2RTC(struct ST_RTCTIME LRTCTIME) {
	for (int i = 0; i < 6; i++)
 1ae:	ee 15       	cp	r30, r14
 1b0:	ff 05       	cpc	r31, r15
 1b2:	b1 f7       	brne	.-20     	; 0x1a0 <BINARY2RTC+0x36>
	((uint8_t*)(&LRTCTIME))[i] = BINARY2BCD(((uint8_t*)(&LRTCTIME))[i]);
	return LRTCTIME;
 1b4:	86 e0       	ldi	r24, 0x06	; 6
 1b6:	fe 01       	movw	r30, r28
 1b8:	37 96       	adiw	r30, 0x07	; 7
 1ba:	de 01       	movw	r26, r28
 1bc:	11 96       	adiw	r26, 0x01	; 1
 1be:	01 90       	ld	r0, Z+
 1c0:	0d 92       	st	X+, r0
 1c2:	8a 95       	dec	r24
 1c4:	e1 f7       	brne	.-8      	; 0x1be <BINARY2RTC+0x54>
 1c6:	29 81       	ldd	r18, Y+1	; 0x01
 1c8:	3a 81       	ldd	r19, Y+2	; 0x02
 1ca:	4b 81       	ldd	r20, Y+3	; 0x03
 1cc:	5c 81       	ldd	r21, Y+4	; 0x04
 1ce:	6d 81       	ldd	r22, Y+5	; 0x05
 1d0:	7e 81       	ldd	r23, Y+6	; 0x06
}
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	2c 96       	adiw	r28, 0x0c	; 12
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	cd bf       	out	0x3d, r28	; 61
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	ff 90       	pop	r15
 1ec:	ef 90       	pop	r14
 1ee:	08 95       	ret

000001f0 <TBCD2O>:

uint8_t TBCD2O(uint8_t P_BCD, bool P_LR) {
	if (P_LR)
 1f0:	66 23       	and	r22, r22
 1f2:	11 f0       	breq	.+4      	; 0x1f8 <TBCD2O+0x8>
	return P_BCD & 0x0f;
 1f4:	8f 70       	andi	r24, 0x0F	; 15
 1f6:	08 95       	ret
	else
	return (P_BCD >> 4) & 0x7;
 1f8:	82 95       	swap	r24
 1fa:	8f 70       	andi	r24, 0x0F	; 15
 1fc:	87 70       	andi	r24, 0x07	; 7
}
 1fe:	08 95       	ret

00000200 <OpenOrCloseAction>:

void OpenOrCloseAction(unsigned int PPORT, unsigned int Psegment, unsigned int Popenorclose) {
	if (Popenorclose)
 200:	45 2b       	or	r20, r21
 202:	e9 f0       	breq	.+58     	; 0x23e <OpenOrCloseAction+0x3e>
	*Ports[PPORT] &= ~(1 << PORTSEGMENTS[PPORT][Psegment]);
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	fc 01       	movw	r30, r24
 20a:	e1 5e       	subi	r30, 0xE1	; 225
 20c:	fe 4f       	sbci	r31, 0xFE	; 254
 20e:	01 90       	ld	r0, Z+
 210:	f0 81       	ld	r31, Z
 212:	e0 2d       	mov	r30, r0
 214:	20 81       	ld	r18, Z
 216:	dc 01       	movw	r26, r24
 218:	ac 5e       	subi	r26, 0xEC	; 236
 21a:	be 4f       	sbci	r27, 0xFE	; 254
 21c:	8d 91       	ld	r24, X+
 21e:	9c 91       	ld	r25, X
 220:	dc 01       	movw	r26, r24
 222:	a6 0f       	add	r26, r22
 224:	b7 1f       	adc	r27, r23
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0c 90       	ld	r0, X
 22c:	02 c0       	rjmp	.+4      	; 0x232 <OpenOrCloseAction+0x32>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	0a 94       	dec	r0
 234:	e2 f7       	brpl	.-8      	; 0x22e <OpenOrCloseAction+0x2e>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	80 83       	st	Z, r24
 23c:	08 95       	ret
	else
	*Ports[PPORT] |= (1 << PORTSEGMENTS[PPORT][Psegment]);
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	fc 01       	movw	r30, r24
 244:	e1 5e       	subi	r30, 0xE1	; 225
 246:	fe 4f       	sbci	r31, 0xFE	; 254
 248:	01 90       	ld	r0, Z+
 24a:	f0 81       	ld	r31, Z
 24c:	e0 2d       	mov	r30, r0
 24e:	20 81       	ld	r18, Z
 250:	dc 01       	movw	r26, r24
 252:	ac 5e       	subi	r26, 0xEC	; 236
 254:	be 4f       	sbci	r27, 0xFE	; 254
 256:	8d 91       	ld	r24, X+
 258:	9c 91       	ld	r25, X
 25a:	dc 01       	movw	r26, r24
 25c:	a6 0f       	add	r26, r22
 25e:	b7 1f       	adc	r27, r23
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0c 90       	ld	r0, X
 266:	02 c0       	rjmp	.+4      	; 0x26c <OpenOrCloseAction+0x6c>
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	0a 94       	dec	r0
 26e:	e2 f7       	brpl	.-8      	; 0x268 <OpenOrCloseAction+0x68>
 270:	82 2b       	or	r24, r18
 272:	80 83       	st	Z, r24
 274:	08 95       	ret

00000276 <Open_Digit>:
unsigned int HandleProcess_SEGMENTNUM = 0;
unsigned int LastPortNumber = 0;
unsigned int LastSegmentNumber = 0;

void Open_Digit(uint8_t P_LeftSide, uint8_t P_RightSide)
{
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	2c 97       	sbiw	r28, 0x0c	; 12
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
	unsigned char Decimal2Digit[10] = { 0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x10 };
 28a:	9a e0       	ldi	r25, 0x0A	; 10
 28c:	e3 e2       	ldi	r30, 0x23	; 35
 28e:	f1 e0       	ldi	r31, 0x01	; 1
 290:	de 01       	movw	r26, r28
 292:	11 96       	adiw	r26, 0x01	; 1
 294:	01 90       	ld	r0, Z+
 296:	0d 92       	st	X+, r0
 298:	9a 95       	dec	r25
 29a:	e1 f7       	brne	.-8      	; 0x294 <Open_Digit+0x1e>
	unsigned char LRDigit[2] = { P_LeftSide, P_RightSide };
 29c:	8b 87       	std	Y+11, r24	; 0x0b
 29e:	6c 87       	std	Y+12, r22	; 0x0c
	PORTB = Decimal2Digit[TBCD2O(LRDigit[HandleProcess_SEGMENTNUM >> 1], HandleProcess_SEGMENTNUM & 1)];
 2a0:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <HandleProcess_SEGMENTNUM>
 2a4:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <HandleProcess_SEGMENTNUM+0x1>
 2a8:	68 2f       	mov	r22, r24
 2aa:	61 70       	andi	r22, 0x01	; 1
 2ac:	96 95       	lsr	r25
 2ae:	87 95       	ror	r24
 2b0:	fe 01       	movw	r30, r28
 2b2:	e8 0f       	add	r30, r24
 2b4:	f9 1f       	adc	r31, r25
 2b6:	83 85       	ldd	r24, Z+11	; 0x0b
 2b8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <TBCD2O>
 2bc:	e1 e0       	ldi	r30, 0x01	; 1
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	ec 0f       	add	r30, r28
 2c2:	fd 1f       	adc	r31, r29
 2c4:	e8 0f       	add	r30, r24
 2c6:	f1 1d       	adc	r31, r1
 2c8:	80 81       	ld	r24, Z
 2ca:	85 b9       	out	0x05, r24	; 5
}
 2cc:	2c 96       	adiw	r28, 0x0c	; 12
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	f8 94       	cli
 2d2:	de bf       	out	0x3e, r29	; 62
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	cd bf       	out	0x3d, r28	; 61
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <Open_Led>:

void Open_Led(uint8_t P_LED) {
	PORTB = ~BCD2BINARY(P_LED);
 2de:	0e 94 66 00 	call	0xcc	; 0xcc <BCD2BINARY>
 2e2:	80 95       	com	r24
 2e4:	85 b9       	out	0x05, r24	; 5
 2e6:	08 95       	ret

000002e8 <HandleProcess>:
}

void HandleProcess(struct ST_RTCTIME LRTCTIME, unsigned int Ptimediv, unsigned int Pleddiv) {
 2e8:	ef 92       	push	r14
 2ea:	ff 92       	push	r15
 2ec:	0f 93       	push	r16
 2ee:	1f 93       	push	r17
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	00 d0       	rcall	.+0      	; 0x2f6 <HandleProcess+0xe>
 2f6:	00 d0       	rcall	.+0      	; 0x2f8 <HandleProcess+0x10>
 2f8:	00 d0       	rcall	.+0      	; 0x2fa <HandleProcess+0x12>
 2fa:	cd b7       	in	r28, 0x3d	; 61
 2fc:	de b7       	in	r29, 0x3e	; 62
 2fe:	49 83       	std	Y+1, r20	; 0x01
 300:	5a 83       	std	Y+2, r21	; 0x02
 302:	6b 83       	std	Y+3, r22	; 0x03
 304:	7c 83       	std	Y+4, r23	; 0x04
 306:	8d 83       	std	Y+5, r24	; 0x05
 308:	9e 83       	std	Y+6, r25	; 0x06
 30a:	79 01       	movw	r14, r18
	OpenOrCloseAction(LastPortNumber, LastSegmentNumber, 0);
 30c:	60 91 49 01 	lds	r22, 0x0149	; 0x800149 <LastSegmentNumber>
 310:	70 91 4a 01 	lds	r23, 0x014A	; 0x80014a <LastSegmentNumber+0x1>
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <LastPortNumber>
 31c:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <LastPortNumber+0x1>
 320:	0e 94 00 01 	call	0x200	; 0x200 <OpenOrCloseAction>
	if (HandleProcess_PORTNUM == 0) {
 324:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <HandleProcess_PORTNUM>
 328:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <HandleProcess_PORTNUM+0x1>
 32c:	00 97       	sbiw	r24, 0x00	; 0
 32e:	89 f4       	brne	.+34     	; 0x352 <HandleProcess+0x6a>
		unsigned char LLeftDigits;
		if (Ptimediv + 1 == HowManyRTC)	LLeftDigits = 0x20;
 330:	85 e0       	ldi	r24, 0x05	; 5
 332:	e8 16       	cp	r14, r24
 334:	f1 04       	cpc	r15, r1
 336:	29 f0       	breq	.+10     	; 0x342 <HandleProcess+0x5a>
		else LLeftDigits = ((uint8_t*)(&LRTCTIME))[Ptimediv + 1];
 338:	fe 01       	movw	r30, r28
 33a:	ee 0d       	add	r30, r14
 33c:	ff 1d       	adc	r31, r15
 33e:	82 81       	ldd	r24, Z+2	; 0x02
 340:	01 c0       	rjmp	.+2      	; 0x344 <HandleProcess+0x5c>

void HandleProcess(struct ST_RTCTIME LRTCTIME, unsigned int Ptimediv, unsigned int Pleddiv) {
	OpenOrCloseAction(LastPortNumber, LastSegmentNumber, 0);
	if (HandleProcess_PORTNUM == 0) {
		unsigned char LLeftDigits;
		if (Ptimediv + 1 == HowManyRTC)	LLeftDigits = 0x20;
 342:	80 e2       	ldi	r24, 0x20	; 32
		else LLeftDigits = ((uint8_t*)(&LRTCTIME))[Ptimediv + 1];
		Open_Digit(LLeftDigits, ((uint8_t*)(&LRTCTIME))[Ptimediv]);
 344:	fe 01       	movw	r30, r28
 346:	ee 0d       	add	r30, r14
 348:	ff 1d       	adc	r31, r15
 34a:	61 81       	ldd	r22, Z+1	; 0x01
 34c:	0e 94 3b 01 	call	0x276	; 0x276 <Open_Digit>
 350:	08 c0       	rjmp	.+16     	; 0x362 <HandleProcess+0x7a>
	}
	else if (HandleProcess_PORTNUM == 1)
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	31 f4       	brne	.+12     	; 0x362 <HandleProcess+0x7a>
	Open_Led(((uint8_t*)(&LRTCTIME))[Pleddiv]);
 356:	fe 01       	movw	r30, r28
 358:	e0 0f       	add	r30, r16
 35a:	f1 1f       	adc	r31, r17
 35c:	81 81       	ldd	r24, Z+1	; 0x01
 35e:	0e 94 6f 01 	call	0x2de	; 0x2de <Open_Led>
	OpenOrCloseAction(HandleProcess_PORTNUM, HandleProcess_SEGMENTNUM, 1);
 362:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <HandleProcess_SEGMENTNUM>
 366:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <HandleProcess_SEGMENTNUM+0x1>
 36a:	41 e0       	ldi	r20, 0x01	; 1
 36c:	50 e0       	ldi	r21, 0x00	; 0
 36e:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <HandleProcess_PORTNUM>
 372:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <HandleProcess_PORTNUM+0x1>
 376:	0e 94 00 01 	call	0x200	; 0x200 <OpenOrCloseAction>

	LastPortNumber = HandleProcess_PORTNUM;
 37a:	40 91 4f 01 	lds	r20, 0x014F	; 0x80014f <HandleProcess_PORTNUM>
 37e:	50 91 50 01 	lds	r21, 0x0150	; 0x800150 <HandleProcess_PORTNUM+0x1>
 382:	50 93 4c 01 	sts	0x014C, r21	; 0x80014c <LastPortNumber+0x1>
 386:	40 93 4b 01 	sts	0x014B, r20	; 0x80014b <LastPortNumber>
	LastSegmentNumber = HandleProcess_SEGMENTNUM;
 38a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <HandleProcess_SEGMENTNUM>
 38e:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <HandleProcess_SEGMENTNUM+0x1>
 392:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <LastSegmentNumber+0x1>
 396:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <LastSegmentNumber>
	HandleProcess_SEGMENTNUM++;
 39a:	01 96       	adiw	r24, 0x01	; 1
 39c:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <HandleProcess_SEGMENTNUM+0x1>
 3a0:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <HandleProcess_SEGMENTNUM>

	if (HandleProcess_SEGMENTNUM == portsegmentnums[HandleProcess_PORTNUM]) {
 3a4:	fa 01       	movw	r30, r20
 3a6:	e3 5e       	subi	r30, 0xE3	; 227
 3a8:	fe 4f       	sbci	r31, 0xFE	; 254
 3aa:	20 81       	ld	r18, Z
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	82 17       	cp	r24, r18
 3b0:	93 07       	cpc	r25, r19
 3b2:	51 f4       	brne	.+20     	; 0x3c8 <HandleProcess+0xe0>
		HandleProcess_PORTNUM++;
 3b4:	4f 5f       	subi	r20, 0xFF	; 255
 3b6:	5f 4f       	sbci	r21, 0xFF	; 255
 3b8:	50 93 50 01 	sts	0x0150, r21	; 0x800150 <HandleProcess_PORTNUM+0x1>
 3bc:	40 93 4f 01 	sts	0x014F, r20	; 0x80014f <HandleProcess_PORTNUM>
		HandleProcess_SEGMENTNUM = 0;
 3c0:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <HandleProcess_SEGMENTNUM+0x1>
 3c4:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <HandleProcess_SEGMENTNUM>
	}
	if (HandleProcess_PORTNUM == Dtotalports)
 3c8:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <HandleProcess_PORTNUM>
 3cc:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <HandleProcess_PORTNUM+0x1>
 3d0:	02 97       	sbiw	r24, 0x02	; 2
 3d2:	21 f4       	brne	.+8      	; 0x3dc <HandleProcess+0xf4>
	HandleProcess_PORTNUM = 0;
 3d4:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <HandleProcess_PORTNUM+0x1>
 3d8:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <HandleProcess_PORTNUM>
}
 3dc:	26 96       	adiw	r28, 0x06	; 6
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	f8 94       	cli
 3e2:	de bf       	out	0x3e, r29	; 62
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	cd bf       	out	0x3d, r28	; 61
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	ff 90       	pop	r15
 3f2:	ef 90       	pop	r14
 3f4:	08 95       	ret

000003f6 <IBP>:

unsigned int HoldTime[3] = { 0,0,0 };
unsigned char ButtonD[3] = { PD3, PD0, PD1 };
uint32_t ButtonTimers[6] = { 0, 0, 0, 0, 0, 0 };

bool IBP(uint8_t P_B) { return (!(PIND & (1 << ButtonD[P_B]))); }
 3f6:	e8 2f       	mov	r30, r24
 3f8:	99 b1       	in	r25, 0x09	; 9
 3fa:	89 2f       	mov	r24, r25
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	ec 5f       	subi	r30, 0xFC	; 252
 402:	fe 4f       	sbci	r31, 0xFE	; 254
 404:	00 80       	ld	r0, Z
 406:	02 c0       	rjmp	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 408:	95 95       	asr	r25
 40a:	87 95       	ror	r24
 40c:	0a 94       	dec	r0
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 410:	21 e0       	ldi	r18, 0x01	; 1
 412:	82 27       	eor	r24, r18
 414:	81 70       	andi	r24, 0x01	; 1
 416:	08 95       	ret

00000418 <HandleButtonTimers>:

bool HandleButtonTimers(uint32_t P_Limit, uint32_t* P_Current, unsigned int P_TimeAddress, unsigned int P_Bx, unsigned int P_By) {
 418:	8f 92       	push	r8
 41a:	9f 92       	push	r9
 41c:	af 92       	push	r10
 41e:	bf 92       	push	r11
 420:	ef 92       	push	r14
 422:	0f 93       	push	r16
 424:	1f 93       	push	r17
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
	if (P_Current[P_TimeAddress] < P_Limit) {
 42a:	22 0f       	add	r18, r18
 42c:	33 1f       	adc	r19, r19
 42e:	22 0f       	add	r18, r18
 430:	33 1f       	adc	r19, r19
 432:	ea 01       	movw	r28, r20
 434:	c2 0f       	add	r28, r18
 436:	d3 1f       	adc	r29, r19
 438:	88 80       	ld	r8, Y
 43a:	99 80       	ldd	r9, Y+1	; 0x01
 43c:	aa 80       	ldd	r10, Y+2	; 0x02
 43e:	bb 80       	ldd	r11, Y+3	; 0x03
 440:	86 16       	cp	r8, r22
 442:	97 06       	cpc	r9, r23
 444:	a8 06       	cpc	r10, r24
 446:	b9 06       	cpc	r11, r25
 448:	60 f4       	brcc	.+24     	; 0x462 <HandleButtonTimers+0x4a>
		P_Current[P_TimeAddress]++;
 44a:	b5 01       	movw	r22, r10
 44c:	a4 01       	movw	r20, r8
 44e:	4f 5f       	subi	r20, 0xFF	; 255
 450:	5f 4f       	sbci	r21, 0xFF	; 255
 452:	6f 4f       	sbci	r22, 0xFF	; 255
 454:	7f 4f       	sbci	r23, 0xFF	; 255
 456:	48 83       	st	Y, r20
 458:	59 83       	std	Y+1, r21	; 0x01
 45a:	6a 83       	std	Y+2, r22	; 0x02
 45c:	7b 83       	std	Y+3, r23	; 0x03
		return 0;
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	0d c0       	rjmp	.+26     	; 0x47c <HandleButtonTimers+0x64>
 462:	80 2f       	mov	r24, r16
	}
	else if (IBP(P_Bx) & IBP(P_By)) {
 464:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <IBP>
 468:	18 2f       	mov	r17, r24
 46a:	8e 2d       	mov	r24, r14
 46c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <IBP>
 470:	81 23       	and	r24, r17
 472:	21 f0       	breq	.+8      	; 0x47c <HandleButtonTimers+0x64>
		P_Current[P_TimeAddress] = 0;
 474:	18 82       	st	Y, r1
 476:	19 82       	std	Y+1, r1	; 0x01
 478:	1a 82       	std	Y+2, r1	; 0x02
 47a:	1b 82       	std	Y+3, r1	; 0x03
		return 1;
	}
	return 0;
}
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	1f 91       	pop	r17
 482:	0f 91       	pop	r16
 484:	ef 90       	pop	r14
 486:	bf 90       	pop	r11
 488:	af 90       	pop	r10
 48a:	9f 90       	pop	r9
 48c:	8f 90       	pop	r8
 48e:	08 95       	ret

00000490 <I2C_Init>:

void I2C_Init() {
	TWSR = 0;
 490:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = ((F_CPU / F_SCL) - 16) / 2;
 494:	80 e2       	ldi	r24, 0x20	; 32
 496:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 49a:	08 95       	ret

0000049c <I2C_Start>:
}

uint8_t I2C_Start() {
	TWCR = TW_START;
 49c:	84 ea       	ldi	r24, 0xA4	; 164
 49e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!TW_READY);
 4a2:	ec eb       	ldi	r30, 0xBC	; 188
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	88 23       	and	r24, r24
 4aa:	ec f7       	brge	.-6      	; 0x4a6 <I2C_Start+0xa>
	return (TW_STATUS == 0x08);
 4ac:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 4b0:	98 7f       	andi	r25, 0xF8	; 248
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	98 30       	cpi	r25, 0x08	; 8
 4b6:	09 f0       	breq	.+2      	; 0x4ba <I2C_Start+0x1e>
 4b8:	80 e0       	ldi	r24, 0x00	; 0
}
 4ba:	08 95       	ret

000004bc <I2C_SendAddr>:


uint8_t I2C_SendAddr(uint8_t addr) {
	TWDR = addr;
 4bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = TW_SEND;
 4c0:	84 e8       	ldi	r24, 0x84	; 132
 4c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!TW_READY);
 4c6:	ec eb       	ldi	r30, 0xBC	; 188
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	80 81       	ld	r24, Z
 4cc:	88 23       	and	r24, r24
 4ce:	ec f7       	brge	.-6      	; 0x4ca <I2C_SendAddr+0xe>
	return (TW_STATUS == 0x18);
 4d0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 4d4:	98 7f       	andi	r25, 0xF8	; 248
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	98 31       	cpi	r25, 0x18	; 24
 4da:	09 f0       	breq	.+2      	; 0x4de <I2C_SendAddr+0x22>
 4dc:	80 e0       	ldi	r24, 0x00	; 0
}
 4de:	08 95       	ret

000004e0 <I2C_Write>:

uint8_t I2C_Write(uint8_t data) {
	TWDR = data;
 4e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = TW_SEND;
 4e4:	84 e8       	ldi	r24, 0x84	; 132
 4e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!TW_READY);
 4ea:	ec eb       	ldi	r30, 0xBC	; 188
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	88 23       	and	r24, r24
 4f2:	ec f7       	brge	.-6      	; 0x4ee <I2C_Write+0xe>
	return (TW_STATUS != 0x28);
 4f4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 4f8:	98 7f       	andi	r25, 0xF8	; 248
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	98 32       	cpi	r25, 0x28	; 40
 4fe:	09 f4       	brne	.+2      	; 0x502 <I2C_Write+0x22>
 500:	80 e0       	ldi	r24, 0x00	; 0
}
 502:	08 95       	ret

00000504 <I2C_ReadNACK>:

uint8_t I2C_ReadNACK() {
	TWCR = TW_NACK;
 504:	84 e8       	ldi	r24, 0x84	; 132
 506:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while (!TW_READY);
 50a:	ec eb       	ldi	r30, 0xBC	; 188
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	88 23       	and	r24, r24
 512:	ec f7       	brge	.-6      	; 0x50e <I2C_ReadNACK+0xa>
	return TWDR;
 514:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
 518:	08 95       	ret

0000051a <I2C_WriteRegister>:

void I2C_WriteRegister(uint8_t deviceRegister, uint8_t data) {
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	d8 2f       	mov	r29, r24
 520:	c6 2f       	mov	r28, r22
	I2C_Start();
 522:	0e 94 4e 02 	call	0x49c	; 0x49c <I2C_Start>
	I2C_SendAddr(MCP7940N_WRITE);
 526:	8e ed       	ldi	r24, 0xDE	; 222
 528:	0e 94 5e 02 	call	0x4bc	; 0x4bc <I2C_SendAddr>
	I2C_Write(deviceRegister);
 52c:	8d 2f       	mov	r24, r29
 52e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <I2C_Write>
	I2C_Write(data);
 532:	8c 2f       	mov	r24, r28
 534:	0e 94 70 02 	call	0x4e0	; 0x4e0 <I2C_Write>
	I2C_Stop();
 538:	84 e9       	ldi	r24, 0x94	; 148
 53a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	08 95       	ret

00000544 <I2C_ReadRegister>:

uint8_t  I2C_ReadRegister(uint8_t  busAddr, uint8_t deviceRegister) {
 544:	cf 93       	push	r28
 546:	c6 2f       	mov	r28, r22
	uint8_t data = 0;
	I2C_Start();
 548:	0e 94 4e 02 	call	0x49c	; 0x49c <I2C_Start>
	I2C_SendAddr(MCP7940N_WRITE);
 54c:	8e ed       	ldi	r24, 0xDE	; 222
 54e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <I2C_SendAddr>
	I2C_Write(deviceRegister);
 552:	8c 2f       	mov	r24, r28
 554:	0e 94 70 02 	call	0x4e0	; 0x4e0 <I2C_Write>
	I2C_Start();
 558:	0e 94 4e 02 	call	0x49c	; 0x49c <I2C_Start>
	I2C_SendAddr(MCP7940N_WRITE + READ);
 55c:	8f ed       	ldi	r24, 0xDF	; 223
 55e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <I2C_SendAddr>
	data = I2C_ReadNACK();
 562:	0e 94 82 02 	call	0x504	; 0x504 <I2C_ReadNACK>
	I2C_Stop();
 566:	94 e9       	ldi	r25, 0x94	; 148
 568:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	return data;
}
 56c:	cf 91       	pop	r28
 56e:	08 95       	ret

00000570 <MCP7940N_GetRTC>:

struct ST_RTCTIME MCP7940N_GetRTC(void) {
 570:	cf 92       	push	r12
 572:	df 92       	push	r13
 574:	ef 92       	push	r14
 576:	ff 92       	push	r15
 578:	0f 93       	push	r16
 57a:	1f 93       	push	r17
 57c:	cf 93       	push	r28
 57e:	df 93       	push	r29
 580:	cd b7       	in	r28, 0x3d	; 61
 582:	de b7       	in	r29, 0x3e	; 62
 584:	2c 97       	sbiw	r28, 0x0c	; 12
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	f8 94       	cli
 58a:	de bf       	out	0x3e, r29	; 62
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	cd bf       	out	0x3d, r28	; 61
 590:	07 e0       	ldi	r16, 0x07	; 7
 592:	11 e0       	ldi	r17, 0x01	; 1
 594:	7e 01       	movw	r14, r28
 596:	87 e0       	ldi	r24, 0x07	; 7
 598:	e8 0e       	add	r14, r24
 59a:	f1 1c       	adc	r15, r1
 59c:	0f 2e       	mov	r0, r31
 59e:	fd e0       	ldi	r31, 0x0D	; 13
 5a0:	cf 2e       	mov	r12, r31
 5a2:	f1 e0       	ldi	r31, 0x01	; 1
 5a4:	df 2e       	mov	r13, r31
 5a6:	f0 2d       	mov	r31, r0
	struct ST_RTCTIME LRTCTIME;

	for (int i = 0; i < 6; i++)
	((uint8_t*)(&LRTCTIME))[i] = I2C_ReadRegister(MCP7940N_WRITE, RTCADDRESS[i]);
 5a8:	f8 01       	movw	r30, r16
 5aa:	61 91       	ld	r22, Z+
 5ac:	8f 01       	movw	r16, r30
 5ae:	8e ed       	ldi	r24, 0xDE	; 222
 5b0:	0e 94 a2 02 	call	0x544	; 0x544 <I2C_ReadRegister>
 5b4:	f7 01       	movw	r30, r14
 5b6:	81 93       	st	Z+, r24
 5b8:	7f 01       	movw	r14, r30
}

struct ST_RTCTIME MCP7940N_GetRTC(void) {
	struct ST_RTCTIME LRTCTIME;

	for (int i = 0; i < 6; i++)
 5ba:	0c 15       	cp	r16, r12
 5bc:	1d 05       	cpc	r17, r13
 5be:	a1 f7       	brne	.-24     	; 0x5a8 <MCP7940N_GetRTC+0x38>
	((uint8_t*)(&LRTCTIME))[i] = I2C_ReadRegister(MCP7940N_WRITE, RTCADDRESS[i]);

	return LRTCTIME;
 5c0:	86 e0       	ldi	r24, 0x06	; 6
 5c2:	fe 01       	movw	r30, r28
 5c4:	37 96       	adiw	r30, 0x07	; 7
 5c6:	de 01       	movw	r26, r28
 5c8:	11 96       	adiw	r26, 0x01	; 1
 5ca:	01 90       	ld	r0, Z+
 5cc:	0d 92       	st	X+, r0
 5ce:	8a 95       	dec	r24
 5d0:	e1 f7       	brne	.-8      	; 0x5ca <MCP7940N_GetRTC+0x5a>
 5d2:	29 81       	ldd	r18, Y+1	; 0x01
 5d4:	3a 81       	ldd	r19, Y+2	; 0x02
 5d6:	4b 81       	ldd	r20, Y+3	; 0x03
 5d8:	5c 81       	ldd	r21, Y+4	; 0x04
 5da:	6d 81       	ldd	r22, Y+5	; 0x05
 5dc:	7e 81       	ldd	r23, Y+6	; 0x06
}
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	2c 96       	adiw	r28, 0x0c	; 12
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	f8 94       	cli
 5e8:	de bf       	out	0x3e, r29	; 62
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	cd bf       	out	0x3d, r28	; 61
 5ee:	df 91       	pop	r29
 5f0:	cf 91       	pop	r28
 5f2:	1f 91       	pop	r17
 5f4:	0f 91       	pop	r16
 5f6:	ff 90       	pop	r15
 5f8:	ef 90       	pop	r14
 5fa:	df 90       	pop	r13
 5fc:	cf 90       	pop	r12
 5fe:	08 95       	ret

00000600 <MENU_Select>:
		if (((uint8_t*)(&SetClockRTCTIME))[SetClockPDiv] >= RTCDIGITMAX[SetClockPDiv]) ((uint8_t*)(&SetClockRTCTIME))[SetClockPDiv] = 0;
	}
	HandleProcess(BINARY2RTC(SetClockRTCTIME), SetClockPDiv, 0);
}

void MENU_Select(void) {
 600:	ef 92       	push	r14
 602:	ff 92       	push	r15
 604:	0f 93       	push	r16
 606:	1f 93       	push	r17
 608:	cf 93       	push	r28
 60a:	df 93       	push	r29
 60c:	cd b7       	in	r28, 0x3d	; 61
 60e:	de b7       	in	r29, 0x3e	; 62
 610:	2c 97       	sbiw	r28, 0x0c	; 12
 612:	0f b6       	in	r0, 0x3f	; 63
 614:	f8 94       	cli
 616:	de bf       	out	0x3e, r29	; 62
 618:	0f be       	out	0x3f, r0	; 63
 61a:	cd bf       	out	0x3d, r28	; 61
	struct ST_RTCTIME LRTCTIME = MCP7940N_GetRTC();
 61c:	0e 94 b8 02 	call	0x570	; 0x570 <MCP7940N_GetRTC>
 620:	b2 2f       	mov	r27, r18
 622:	a3 2f       	mov	r26, r19
 624:	f4 2f       	mov	r31, r20
 626:	e5 2f       	mov	r30, r21
 628:	86 2f       	mov	r24, r22
 62a:	97 2f       	mov	r25, r23
	HandleProcess(LRTCTIME, SetClockPDiv, 0);
 62c:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <__data_end>
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	00 e0       	ldi	r16, 0x00	; 0
 634:	10 e0       	ldi	r17, 0x00	; 0
 636:	4b 2f       	mov	r20, r27
 638:	5a 2f       	mov	r21, r26
 63a:	6f 2f       	mov	r22, r31
 63c:	7e 2f       	mov	r23, r30
 63e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <HandleProcess>
	if (HandleButtonTimers(0xb0, ButtonTimers, 1, 1, 1)) {
 642:	ee 24       	eor	r14, r14
 644:	e3 94       	inc	r14
 646:	f1 2c       	mov	r15, r1
 648:	01 e0       	ldi	r16, 0x01	; 1
 64a:	10 e0       	ldi	r17, 0x00	; 0
 64c:	21 e0       	ldi	r18, 0x01	; 1
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	41 e3       	ldi	r20, 0x31	; 49
 652:	51 e0       	ldi	r21, 0x01	; 1
 654:	60 eb       	ldi	r22, 0xB0	; 176
 656:	70 e0       	ldi	r23, 0x00	; 0
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	0e 94 0c 02 	call	0x418	; 0x418 <HandleButtonTimers>
 660:	88 23       	and	r24, r24
 662:	51 f0       	breq	.+20     	; 0x678 <MENU_Select+0x78>
		SetClockPDiv = (SetClockPDiv + 1) % HowManyRTC;
 664:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	01 96       	adiw	r24, 0x01	; 1
 66c:	66 e0       	ldi	r22, 0x06	; 6
 66e:	70 e0       	ldi	r23, 0x00	; 0
 670:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__divmodhi4>
 674:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
	}
	if (HandleButtonTimers(0x100, ButtonTimers, 2, 2, 2)) {
 678:	68 94       	set
 67a:	ee 24       	eor	r14, r14
 67c:	e1 f8       	bld	r14, 1
 67e:	f1 2c       	mov	r15, r1
 680:	02 e0       	ldi	r16, 0x02	; 2
 682:	10 e0       	ldi	r17, 0x00	; 0
 684:	22 e0       	ldi	r18, 0x02	; 2
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	41 e3       	ldi	r20, 0x31	; 49
 68a:	51 e0       	ldi	r21, 0x01	; 1
 68c:	60 e0       	ldi	r22, 0x00	; 0
 68e:	71 e0       	ldi	r23, 0x01	; 1
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 0c 02 	call	0x418	; 0x418 <HandleButtonTimers>
 698:	88 23       	and	r24, r24
 69a:	f1 f0       	breq	.+60     	; 0x6d8 <MENU_Select+0xd8>
		SetClockRTCTIME = RTC2BINARY(MCP7940N_GetRTC());
 69c:	0e 94 b8 02 	call	0x570	; 0x570 <MCP7940N_GetRTC>
 6a0:	f4 2f       	mov	r31, r20
 6a2:	e5 2f       	mov	r30, r21
 6a4:	86 2f       	mov	r24, r22
 6a6:	97 2f       	mov	r25, r23
 6a8:	42 2f       	mov	r20, r18
 6aa:	53 2f       	mov	r21, r19
 6ac:	6f 2f       	mov	r22, r31
 6ae:	7e 2f       	mov	r23, r30
 6b0:	0e 94 72 00 	call	0xe4	; 0xe4 <RTC2BINARY>
 6b4:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <SetClockRTCTIME>
 6b8:	30 93 52 01 	sts	0x0152, r19	; 0x800152 <SetClockRTCTIME+0x1>
 6bc:	40 93 53 01 	sts	0x0153, r20	; 0x800153 <SetClockRTCTIME+0x2>
 6c0:	50 93 54 01 	sts	0x0154, r21	; 0x800154 <SetClockRTCTIME+0x3>
 6c4:	60 93 55 01 	sts	0x0155, r22	; 0x800155 <SetClockRTCTIME+0x4>
 6c8:	70 93 56 01 	sts	0x0156, r23	; 0x800156 <SetClockRTCTIME+0x5>
		G_CurrentMenu = 1;
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <G_CurrentMenu+0x1>
 6d4:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <G_CurrentMenu>
	}
}
 6d8:	2c 96       	adiw	r28, 0x0c	; 12
 6da:	0f b6       	in	r0, 0x3f	; 63
 6dc:	f8 94       	cli
 6de:	de bf       	out	0x3e, r29	; 62
 6e0:	0f be       	out	0x3f, r0	; 63
 6e2:	cd bf       	out	0x3d, r28	; 61
 6e4:	df 91       	pop	r29
 6e6:	cf 91       	pop	r28
 6e8:	1f 91       	pop	r17
 6ea:	0f 91       	pop	r16
 6ec:	ff 90       	pop	r15
 6ee:	ef 90       	pop	r14
 6f0:	08 95       	ret

000006f2 <MCP7940N_WriteRTC>:
	((uint8_t*)(&LRTCTIME))[i] = I2C_ReadRegister(MCP7940N_WRITE, RTCADDRESS[i]);

	return LRTCTIME;
}

void MCP7940N_WriteRTC(struct ST_RTCTIME LRTCTIME) {
 6f2:	cf 92       	push	r12
 6f4:	df 92       	push	r13
 6f6:	ef 92       	push	r14
 6f8:	ff 92       	push	r15
 6fa:	0f 93       	push	r16
 6fc:	1f 93       	push	r17
 6fe:	cf 93       	push	r28
 700:	df 93       	push	r29
 702:	00 d0       	rcall	.+0      	; 0x704 <MCP7940N_WriteRTC+0x12>
 704:	00 d0       	rcall	.+0      	; 0x706 <MCP7940N_WriteRTC+0x14>
 706:	00 d0       	rcall	.+0      	; 0x708 <MCP7940N_WriteRTC+0x16>
 708:	cd b7       	in	r28, 0x3d	; 61
 70a:	de b7       	in	r29, 0x3e	; 62
 70c:	49 83       	std	Y+1, r20	; 0x01
 70e:	5a 83       	std	Y+2, r21	; 0x02
 710:	6b 83       	std	Y+3, r22	; 0x03
 712:	7c 83       	std	Y+4, r23	; 0x04
 714:	8d 83       	std	Y+5, r24	; 0x05
 716:	9e 83       	std	Y+6, r25	; 0x06
 718:	8e 01       	movw	r16, r28
 71a:	0f 5f       	subi	r16, 0xFF	; 255
 71c:	1f 4f       	sbci	r17, 0xFF	; 255
 71e:	0f 2e       	mov	r0, r31
 720:	f7 e0       	ldi	r31, 0x07	; 7
 722:	ef 2e       	mov	r14, r31
 724:	f1 e0       	ldi	r31, 0x01	; 1
 726:	ff 2e       	mov	r15, r31
 728:	f0 2d       	mov	r31, r0
 72a:	6e 01       	movw	r12, r28
 72c:	87 e0       	ldi	r24, 0x07	; 7
 72e:	c8 0e       	add	r12, r24
 730:	d1 1c       	adc	r13, r1
	for (int i = 0; i < 6; i++)
	I2C_WriteRegister(RTCADDRESS[i], ((uint8_t*)(&LRTCTIME))[i]);
 732:	f8 01       	movw	r30, r16
 734:	61 91       	ld	r22, Z+
 736:	8f 01       	movw	r16, r30
 738:	f7 01       	movw	r30, r14
 73a:	81 91       	ld	r24, Z+
 73c:	7f 01       	movw	r14, r30
 73e:	0e 94 8d 02 	call	0x51a	; 0x51a <I2C_WriteRegister>

	return LRTCTIME;
}

void MCP7940N_WriteRTC(struct ST_RTCTIME LRTCTIME) {
	for (int i = 0; i < 6; i++)
 742:	0c 15       	cp	r16, r12
 744:	1d 05       	cpc	r17, r13
 746:	a9 f7       	brne	.-22     	; 0x732 <MCP7940N_WriteRTC+0x40>
	I2C_WriteRegister(RTCADDRESS[i], ((uint8_t*)(&LRTCTIME))[i]);
}
 748:	26 96       	adiw	r28, 0x06	; 6
 74a:	0f b6       	in	r0, 0x3f	; 63
 74c:	f8 94       	cli
 74e:	de bf       	out	0x3e, r29	; 62
 750:	0f be       	out	0x3f, r0	; 63
 752:	cd bf       	out	0x3d, r28	; 61
 754:	df 91       	pop	r29
 756:	cf 91       	pop	r28
 758:	1f 91       	pop	r17
 75a:	0f 91       	pop	r16
 75c:	ff 90       	pop	r15
 75e:	ef 90       	pop	r14
 760:	df 90       	pop	r13
 762:	cf 90       	pop	r12
 764:	08 95       	ret

00000766 <MCP7940N_EnableSTOscillator>:

void MCP7940N_EnableSTOscillator() {
 766:	cf 93       	push	r28
 768:	df 93       	push	r29
	uint8_t MCP7940Nregister = 0;
	MCP7940Nregister = I2C_ReadRegister(MCP7940N_WRITE, RTCADDRESS[0]);
 76a:	c7 e0       	ldi	r28, 0x07	; 7
 76c:	d1 e0       	ldi	r29, 0x01	; 1
 76e:	68 81       	ld	r22, Y
 770:	8e ed       	ldi	r24, 0xDE	; 222
 772:	0e 94 a2 02 	call	0x544	; 0x544 <I2C_ReadRegister>
	MCP7940Nregister |= MCP7940N_ST_BIT_ENABLE;
	I2C_WriteRegister(RTCADDRESS[0], MCP7940Nregister);
 776:	68 2f       	mov	r22, r24
 778:	60 68       	ori	r22, 0x80	; 128
 77a:	88 81       	ld	r24, Y
 77c:	0e 94 8d 02 	call	0x51a	; 0x51a <I2C_WriteRegister>
}
 780:	df 91       	pop	r29
 782:	cf 91       	pop	r28
 784:	08 95       	ret

00000786 <MENU_SetClock>:

unsigned int G_CurrentMenu = 0;

struct ST_RTCTIME SetClockRTCTIME;
uint8_t SetClockPDiv = 0;
void MENU_SetClock(void) {
 786:	ef 92       	push	r14
 788:	ff 92       	push	r15
 78a:	0f 93       	push	r16
 78c:	1f 93       	push	r17
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	cd b7       	in	r28, 0x3d	; 61
 794:	de b7       	in	r29, 0x3e	; 62
 796:	2c 97       	sbiw	r28, 0x0c	; 12
 798:	0f b6       	in	r0, 0x3f	; 63
 79a:	f8 94       	cli
 79c:	de bf       	out	0x3e, r29	; 62
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	cd bf       	out	0x3d, r28	; 61
	if (HandleButtonTimers(0x1000, ButtonTimers, 3, 0, 2)) {
 7a2:	68 94       	set
 7a4:	ee 24       	eor	r14, r14
 7a6:	e1 f8       	bld	r14, 1
 7a8:	f1 2c       	mov	r15, r1
 7aa:	00 e0       	ldi	r16, 0x00	; 0
 7ac:	10 e0       	ldi	r17, 0x00	; 0
 7ae:	23 e0       	ldi	r18, 0x03	; 3
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	41 e3       	ldi	r20, 0x31	; 49
 7b4:	51 e0       	ldi	r21, 0x01	; 1
 7b6:	60 e0       	ldi	r22, 0x00	; 0
 7b8:	70 e1       	ldi	r23, 0x10	; 16
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	0e 94 0c 02 	call	0x418	; 0x418 <HandleButtonTimers>
 7c2:	88 23       	and	r24, r24
 7c4:	39 f1       	breq	.+78     	; 0x814 <MENU_SetClock+0x8e>
		G_CurrentMenu = 0;
 7c6:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <G_CurrentMenu+0x1>
 7ca:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <G_CurrentMenu>
		MCP7940N_WriteRTC(BINARY2RTC(SetClockRTCTIME));
 7ce:	40 91 51 01 	lds	r20, 0x0151	; 0x800151 <SetClockRTCTIME>
 7d2:	50 91 52 01 	lds	r21, 0x0152	; 0x800152 <SetClockRTCTIME+0x1>
 7d6:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <SetClockRTCTIME+0x2>
 7da:	70 91 54 01 	lds	r23, 0x0154	; 0x800154 <SetClockRTCTIME+0x3>
 7de:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <SetClockRTCTIME+0x4>
 7e2:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <SetClockRTCTIME+0x5>
 7e6:	0e 94 b5 00 	call	0x16a	; 0x16a <BINARY2RTC>
 7ea:	f4 2f       	mov	r31, r20
 7ec:	e5 2f       	mov	r30, r21
 7ee:	86 2f       	mov	r24, r22
 7f0:	97 2f       	mov	r25, r23
 7f2:	42 2f       	mov	r20, r18
 7f4:	53 2f       	mov	r21, r19
 7f6:	6f 2f       	mov	r22, r31
 7f8:	7e 2f       	mov	r23, r30
 7fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <MCP7940N_WriteRTC>
		MCP7940N_EnableSTOscillator();
 7fe:	0e 94 b3 03 	call	0x766	; 0x766 <MCP7940N_EnableSTOscillator>
		ButtonTimers[2] = 0;
 802:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <ButtonTimers+0x8>
 806:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <ButtonTimers+0x9>
 80a:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <ButtonTimers+0xa>
 80e:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <ButtonTimers+0xb>
		return;
 812:	90 c0       	rjmp	.+288    	; 0x934 <__stack+0x35>
	}
	if (IBP(0) || IBP(2)) ButtonTimers[1] = 0;
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <IBP>
 81a:	81 11       	cpse	r24, r1
 81c:	05 c0       	rjmp	.+10     	; 0x828 <MENU_SetClock+0xa2>
 81e:	82 e0       	ldi	r24, 0x02	; 2
 820:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <IBP>
 824:	88 23       	and	r24, r24
 826:	41 f0       	breq	.+16     	; 0x838 <MENU_SetClock+0xb2>
 828:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <ButtonTimers+0x4>
 82c:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <ButtonTimers+0x5>
 830:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <ButtonTimers+0x6>
 834:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <ButtonTimers+0x7>
	if (HandleButtonTimers(0x1000, ButtonTimers, 1, 1, 1)) {
 838:	ee 24       	eor	r14, r14
 83a:	e3 94       	inc	r14
 83c:	f1 2c       	mov	r15, r1
 83e:	01 e0       	ldi	r16, 0x01	; 1
 840:	10 e0       	ldi	r17, 0x00	; 0
 842:	21 e0       	ldi	r18, 0x01	; 1
 844:	30 e0       	ldi	r19, 0x00	; 0
 846:	41 e3       	ldi	r20, 0x31	; 49
 848:	51 e0       	ldi	r21, 0x01	; 1
 84a:	60 e0       	ldi	r22, 0x00	; 0
 84c:	70 e1       	ldi	r23, 0x10	; 16
 84e:	80 e0       	ldi	r24, 0x00	; 0
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	0e 94 0c 02 	call	0x418	; 0x418 <HandleButtonTimers>
 856:	88 23       	and	r24, r24
 858:	51 f0       	breq	.+20     	; 0x86e <MENU_SetClock+0xe8>
		SetClockPDiv = (SetClockPDiv + 1) % HowManyRTC;
 85a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	01 96       	adiw	r24, 0x01	; 1
 862:	66 e0       	ldi	r22, 0x06	; 6
 864:	70 e0       	ldi	r23, 0x00	; 0
 866:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__divmodhi4>
 86a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
	}
	if (HandleButtonTimers(0x800, ButtonTimers, 0, 0, 1)) {
 86e:	ee 24       	eor	r14, r14
 870:	e3 94       	inc	r14
 872:	f1 2c       	mov	r15, r1
 874:	00 e0       	ldi	r16, 0x00	; 0
 876:	10 e0       	ldi	r17, 0x00	; 0
 878:	20 e0       	ldi	r18, 0x00	; 0
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	41 e3       	ldi	r20, 0x31	; 49
 87e:	51 e0       	ldi	r21, 0x01	; 1
 880:	60 e0       	ldi	r22, 0x00	; 0
 882:	78 e0       	ldi	r23, 0x08	; 8
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e 94 0c 02 	call	0x418	; 0x418 <HandleButtonTimers>
 88c:	88 23       	and	r24, r24
 88e:	89 f0       	breq	.+34     	; 0x8b2 <MENU_SetClock+0x12c>
		((uint8_t*)(&SetClockRTCTIME))[SetClockPDiv] -= 1;
 890:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	fc 01       	movw	r30, r24
 898:	ef 5a       	subi	r30, 0xAF	; 175
 89a:	fe 4f       	sbci	r31, 0xFE	; 254
 89c:	20 81       	ld	r18, Z
 89e:	21 50       	subi	r18, 0x01	; 1
 8a0:	20 83       	st	Z, r18
		if (((uint8_t*)(&SetClockRTCTIME))[SetClockPDiv] > RTCDIGITMAX[SetClockPDiv]) ((uint8_t*)(&SetClockRTCTIME))[SetClockPDiv] = RTCDIGITMAX[SetClockPDiv] - 1;
 8a2:	dc 01       	movw	r26, r24
 8a4:	a2 5f       	subi	r26, 0xF2	; 242
 8a6:	be 4f       	sbci	r27, 0xFE	; 254
 8a8:	8c 91       	ld	r24, X
 8aa:	82 17       	cp	r24, r18
 8ac:	10 f4       	brcc	.+4      	; 0x8b2 <MENU_SetClock+0x12c>
 8ae:	81 50       	subi	r24, 0x01	; 1
 8b0:	80 83       	st	Z, r24
	}
	if (HandleButtonTimers(0x800, ButtonTimers, 2, 2, 1)) {
 8b2:	ee 24       	eor	r14, r14
 8b4:	e3 94       	inc	r14
 8b6:	f1 2c       	mov	r15, r1
 8b8:	02 e0       	ldi	r16, 0x02	; 2
 8ba:	10 e0       	ldi	r17, 0x00	; 0
 8bc:	22 e0       	ldi	r18, 0x02	; 2
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	41 e3       	ldi	r20, 0x31	; 49
 8c2:	51 e0       	ldi	r21, 0x01	; 1
 8c4:	60 e0       	ldi	r22, 0x00	; 0
 8c6:	78 e0       	ldi	r23, 0x08	; 8
 8c8:	80 e0       	ldi	r24, 0x00	; 0
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0e 94 0c 02 	call	0x418	; 0x418 <HandleButtonTimers>
 8d0:	88 23       	and	r24, r24
 8d2:	81 f0       	breq	.+32     	; 0x8f4 <MENU_SetClock+0x16e>
		((uint8_t*)(&SetClockRTCTIME))[SetClockPDiv] += 1;
 8d4:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	fc 01       	movw	r30, r24
 8dc:	ef 5a       	subi	r30, 0xAF	; 175
 8de:	fe 4f       	sbci	r31, 0xFE	; 254
 8e0:	20 81       	ld	r18, Z
 8e2:	2f 5f       	subi	r18, 0xFF	; 255
 8e4:	20 83       	st	Z, r18
		if (((uint8_t*)(&SetClockRTCTIME))[SetClockPDiv] >= RTCDIGITMAX[SetClockPDiv]) ((uint8_t*)(&SetClockRTCTIME))[SetClockPDiv] = 0;
 8e6:	dc 01       	movw	r26, r24
 8e8:	a2 5f       	subi	r26, 0xF2	; 242
 8ea:	be 4f       	sbci	r27, 0xFE	; 254
 8ec:	8c 91       	ld	r24, X
 8ee:	28 17       	cp	r18, r24
 8f0:	08 f0       	brcs	.+2      	; 0x8f4 <MENU_SetClock+0x16e>
 8f2:	10 82       	st	Z, r1
	}
	HandleProcess(BINARY2RTC(SetClockRTCTIME), SetClockPDiv, 0);
 8f4:	e0 90 2e 01 	lds	r14, 0x012E	; 0x80012e <__data_end>
 8f8:	f1 2c       	mov	r15, r1
 8fa:	40 91 51 01 	lds	r20, 0x0151	; 0x800151 <SetClockRTCTIME>
 8fe:	50 91 52 01 	lds	r21, 0x0152	; 0x800152 <SetClockRTCTIME+0x1>
 902:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <SetClockRTCTIME+0x2>
 906:	70 91 54 01 	lds	r23, 0x0154	; 0x800154 <SetClockRTCTIME+0x3>
 90a:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <SetClockRTCTIME+0x4>
 90e:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <SetClockRTCTIME+0x5>
 912:	0e 94 b5 00 	call	0x16a	; 0x16a <BINARY2RTC>
 916:	b2 2f       	mov	r27, r18
 918:	a3 2f       	mov	r26, r19
 91a:	f4 2f       	mov	r31, r20
 91c:	e5 2f       	mov	r30, r21
 91e:	86 2f       	mov	r24, r22
 920:	97 2f       	mov	r25, r23
 922:	00 e0       	ldi	r16, 0x00	; 0
 924:	10 e0       	ldi	r17, 0x00	; 0
 926:	97 01       	movw	r18, r14
 928:	4b 2f       	mov	r20, r27
 92a:	5a 2f       	mov	r21, r26
 92c:	6f 2f       	mov	r22, r31
 92e:	7e 2f       	mov	r23, r30
 930:	0e 94 74 01 	call	0x2e8	; 0x2e8 <HandleProcess>
}
 934:	2c 96       	adiw	r28, 0x0c	; 12
 936:	0f b6       	in	r0, 0x3f	; 63
 938:	f8 94       	cli
 93a:	de bf       	out	0x3e, r29	; 62
 93c:	0f be       	out	0x3f, r0	; 63
 93e:	cd bf       	out	0x3d, r28	; 61
 940:	df 91       	pop	r29
 942:	cf 91       	pop	r28
 944:	1f 91       	pop	r17
 946:	0f 91       	pop	r16
 948:	ff 90       	pop	r15
 94a:	ef 90       	pop	r14
 94c:	08 95       	ret

0000094e <MCP7940N_EnableSQWEN>:
	MCP7940Nregister = I2C_ReadRegister(MCP7940N_WRITE, RTCADDRESS[0]);
	MCP7940Nregister |= MCP7940N_ST_BIT_ENABLE;
	I2C_WriteRegister(RTCADDRESS[0], MCP7940Nregister);
}

void MCP7940N_EnableSQWEN() {
 94e:	cf 93       	push	r28
 950:	df 93       	push	r29
	uint8_t MCP7940Nregister = 0;
	MCP7940Nregister = I2C_ReadRegister(MCP7940N_WRITE, RTCADDRESS[6]);
 952:	c7 e0       	ldi	r28, 0x07	; 7
 954:	d1 e0       	ldi	r29, 0x01	; 1
 956:	6e 81       	ldd	r22, Y+6	; 0x06
 958:	8e ed       	ldi	r24, 0xDE	; 222
 95a:	0e 94 a2 02 	call	0x544	; 0x544 <I2C_ReadRegister>
	MCP7940Nregister |= MCP7940N_SQWEN_BIT_ENABLE;
	I2C_WriteRegister(RTCADDRESS[6], MCP7940Nregister);
 95e:	68 2f       	mov	r22, r24
 960:	60 64       	ori	r22, 0x40	; 64
 962:	8e 81       	ldd	r24, Y+6	; 0x06
 964:	0e 94 8d 02 	call	0x51a	; 0x51a <I2C_WriteRegister>
}
 968:	df 91       	pop	r29
 96a:	cf 91       	pop	r28
 96c:	08 95       	ret

0000096e <main>:

typedef void(*fc)(void);
fc FC_Menu[] = { &MENU_Select, &MENU_SetClock };

int main(void) {
	DDRB = 0xFF; PORTB = 0x0;
 96e:	8f ef       	ldi	r24, 0xFF	; 255
 970:	84 b9       	out	0x04, r24	; 4
 972:	15 b8       	out	0x05, r1	; 5
	DDRD = 0x70; PORTD = 0x00;
 974:	90 e7       	ldi	r25, 0x70	; 112
 976:	9a b9       	out	0x0a, r25	; 10
 978:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0x0F; PORTC = 0xFF;
 97a:	9f e0       	ldi	r25, 0x0F	; 15
 97c:	97 b9       	out	0x07, r25	; 7
 97e:	88 b9       	out	0x08, r24	; 8
	PIEZO_OFF;
 980:	5d 9a       	sbi	0x0b, 5	; 11
	WAKEUP_LIGHT_OFF;
 982:	5e 9a       	sbi	0x0b, 6	; 11
	CLOSE_BOTTOM_LEDS;
 984:	5c 9a       	sbi	0x0b, 4	; 11

	I2C_Init();
 986:	0e 94 48 02 	call	0x490	; 0x490 <I2C_Init>
	MCP7940N_EnableSTOscillator();
 98a:	0e 94 b3 03 	call	0x766	; 0x766 <MCP7940N_EnableSTOscillator>
	MCP7940N_EnableSQWEN();
 98e:	0e 94 a7 04 	call	0x94e	; 0x94e <MCP7940N_EnableSQWEN>
	I2C_WriteRegister(RTCADDRESS[1], 0);
 992:	60 e0       	ldi	r22, 0x00	; 0
 994:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <RTCADDRESS+0x1>
 998:	0e 94 8d 02 	call	0x51a	; 0x51a <I2C_WriteRegister>

	while (1) {
		FC_Menu[G_CurrentMenu]();
 99c:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <G_CurrentMenu>
 9a0:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <G_CurrentMenu+0x1>
 9a4:	ee 0f       	add	r30, r30
 9a6:	ff 1f       	adc	r31, r31
 9a8:	e0 50       	subi	r30, 0x00	; 0
 9aa:	ff 4f       	sbci	r31, 0xFF	; 255
 9ac:	01 90       	ld	r0, Z+
 9ae:	f0 81       	ld	r31, Z
 9b0:	e0 2d       	mov	r30, r0
 9b2:	09 95       	icall
 9b4:	f3 cf       	rjmp	.-26     	; 0x99c <main+0x2e>

000009b6 <__divmodhi4>:
 9b6:	97 fb       	bst	r25, 7
 9b8:	07 2e       	mov	r0, r23
 9ba:	16 f4       	brtc	.+4      	; 0x9c0 <__divmodhi4+0xa>
 9bc:	00 94       	com	r0
 9be:	07 d0       	rcall	.+14     	; 0x9ce <__divmodhi4_neg1>
 9c0:	77 fd       	sbrc	r23, 7
 9c2:	09 d0       	rcall	.+18     	; 0x9d6 <__divmodhi4_neg2>
 9c4:	0e 94 ef 04 	call	0x9de	; 0x9de <__udivmodhi4>
 9c8:	07 fc       	sbrc	r0, 7
 9ca:	05 d0       	rcall	.+10     	; 0x9d6 <__divmodhi4_neg2>
 9cc:	3e f4       	brtc	.+14     	; 0x9dc <__divmodhi4_exit>

000009ce <__divmodhi4_neg1>:
 9ce:	90 95       	com	r25
 9d0:	81 95       	neg	r24
 9d2:	9f 4f       	sbci	r25, 0xFF	; 255
 9d4:	08 95       	ret

000009d6 <__divmodhi4_neg2>:
 9d6:	70 95       	com	r23
 9d8:	61 95       	neg	r22
 9da:	7f 4f       	sbci	r23, 0xFF	; 255

000009dc <__divmodhi4_exit>:
 9dc:	08 95       	ret

000009de <__udivmodhi4>:
 9de:	aa 1b       	sub	r26, r26
 9e0:	bb 1b       	sub	r27, r27
 9e2:	51 e1       	ldi	r21, 0x11	; 17
 9e4:	07 c0       	rjmp	.+14     	; 0x9f4 <__udivmodhi4_ep>

000009e6 <__udivmodhi4_loop>:
 9e6:	aa 1f       	adc	r26, r26
 9e8:	bb 1f       	adc	r27, r27
 9ea:	a6 17       	cp	r26, r22
 9ec:	b7 07       	cpc	r27, r23
 9ee:	10 f0       	brcs	.+4      	; 0x9f4 <__udivmodhi4_ep>
 9f0:	a6 1b       	sub	r26, r22
 9f2:	b7 0b       	sbc	r27, r23

000009f4 <__udivmodhi4_ep>:
 9f4:	88 1f       	adc	r24, r24
 9f6:	99 1f       	adc	r25, r25
 9f8:	5a 95       	dec	r21
 9fa:	a9 f7       	brne	.-22     	; 0x9e6 <__udivmodhi4_loop>
 9fc:	80 95       	com	r24
 9fe:	90 95       	com	r25
 a00:	bc 01       	movw	r22, r24
 a02:	cd 01       	movw	r24, r26
 a04:	08 95       	ret

00000a06 <_exit>:
 a06:	f8 94       	cli

00000a08 <__stop_program>:
 a08:	ff cf       	rjmp	.-2      	; 0xa08 <__stop_program>
